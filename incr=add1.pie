#lang pie
(claim step-+
  (-> Nat
      Nat))
(define step-+
  (λ (n)
    (add1 n)))

(claim +
  (-> Nat Nat
      Nat))
(define +
  (λ (n j)
    (iter-Nat n
      j
      step-+)))

(claim incr
  (-> Nat
      Nat))
(define incr
  (λ (n)
    (iter-Nat n
      1
      (+ 1))))

(claim mot-incr=add1
  (-> Nat
      U))
(define mot-incr=add1
  (λ (n)
    (= Nat (incr n) (add1 n))))

(claim step-incr=add1
  (Pi ((n Nat))
    (-> (= Nat (incr n) (add1 n))
        (= Nat (add1 (incr n)) (add1 (add1 n))))))
;(define step-incr=add1
;  (λ (n incr=add1-n-1)
;    (cong incr=add1-n-1 (+ 1))))


(claim mot-replace-step-incr=add1
  (-> Nat Nat U))
(define mot-replace-step-incr=add1
  (λ (n-1 k)
    (= Nat (add1 (incr n-1)) (add1 k))))

; target : (= X from to)
; mot : (-> X U)
; base: (mot from)
;(replace target   
;   mot
;   base) : (mot to)
(define step-incr=add1
  (λ (n-1 incr=add1-n-1)      
    (replace incr=add1-n-1              ; target : (= Nat (incr n) (add1 n))
      (mot-replace-step-incr=add1 n-1)  ; mot : (-> Nat U)
      (same (add1 (incr n-1))))))       ; base : (mot from) === (mot (incr n)) === (= Nat (add1 (incr n)) (add1 (incr n)))
                                        ; base is evidence that (mot from) is true
                            ; (replace ...) : (mot to) === (mot (add1 n)) ===(= Nat (add1 (incr n)) (add1 (incr n)))  



    
(claim incr=add1
  (Pi ((n Nat))
    (= Nat (incr n) (add1 n))))
(define incr=add1
  (λ (n)
    (ind-Nat n
      mot-incr=add1
      (same (add1 zero))
      step-incr=add1)))


(claim double
  (-> Nat
      Nat))
(define double
  (λ (n)
    (iter-Nat n
      zero
      (λ (j)
        (add1 (add1 j))))))
(claim twice
  (-> Nat
      Nat))
(define twice
  (λ (n)
    (+ n n)))

(claim mot-step-double=twice
  (-> Nat
      U))

(claim step-double=twice
  (Pi ((n Nat))
    (-> (= Nat (double n) (twice n))
        (= Nat (double (add1 n)) (twice (add1 n))))))
;(define step-double=twice
;  (λ (n double=twice-n)
;    (replace double=twice-n ; target : (= Nat (double n) (twice n))
;      )))

(claim mot-double=twice
  (-> Nat
      U))
(define mot-double=twice
  (λ (n)
    (= Nat (double n) (twice n))))


(claim double=twice
  (Pi ((n Nat))
    (= Nat (double n) (twice n))))
(define double=twice
  (λ (n)
    (ind-Nat n
      mot-double=twice
      (same zero)
      step-double=twice)))
    