#lang pie
(claim step-+
  (-> Nat
      Nat))
(define step-+
  (λ (n)
    (add1 n)))

(claim +
  (-> Nat Nat
      Nat))
(define +
  (λ (n j)
    (iter-Nat n
      j
      step-+)))

(claim incr
  (-> Nat
      Nat))
(define incr
  (λ (n)
    (iter-Nat n
      1
      (+ 1))))

(claim mot-incr=add1
  (-> Nat
      U))
(define mot-incr=add1
  (λ (n)
    (= Nat (incr n) (add1 n))))

(claim step-incr=add1
  (Pi ((n Nat))
    (-> (= Nat (incr n) (add1 n))
        (= Nat (add1 (incr n)) (add1 (add1 n))))))
;(define step-incr=add1
;  (λ (n incr=add1-n-1)
;    (cong incr=add1-n-1 (+ 1))))


(claim mot-replace-step-incr=add1
  (-> Nat Nat U))
(define mot-replace-step-incr=add1
  (λ (n-1 k)
    (= Nat (add1 (incr n-1)) (add1 k))))

; target : (= X from to)
; mot : (-> X U)
; base: (mot from)
;(replace target   
;   mot
;   base) : (mot to)
(define step-incr=add1
  (λ (n-1 incr=add1-n-1)      
    (replace incr=add1-n-1              ; target : (= Nat (incr n) (add1 n))
      (mot-replace-step-incr=add1 n-1)  ; mot : (-> Nat U)
      (same (add1 (incr n-1))))))       ; base : (mot from) === (mot (incr n)) === (= Nat (add1 (incr n)) (add1 (incr n)))
                                        ; base is evidence that (mot from) is true
                            ; (replace ...) : (mot to) === (mot (add1 n)) ===(= Nat (add1 (incr n)) (add1 (incr n)))  



    
(claim incr=add1
  (Pi ((n Nat))
    (= Nat (incr n) (add1 n))))
(define incr=add1
  (λ (n)
    (ind-Nat n
      mot-incr=add1
      (same (add1 zero))
      step-incr=add1)))

(claim add1+=+add1
  (Pi ((n Nat)
       (j Nat))
    (= Nat
       (add1 (+ n j))
       (+ n (add1 j)))))

(claim mot-add1+=+add1
  (-> Nat Nat
      U))
(define mot-add1+=+add1
  (λ (j n)
          (= Nat
            (add1 (+ n j))
            (+ n (add1 j)))))

(claim step-add1+=+add1
  (Pi ((j Nat)
       (n Nat))
    (-> (= Nat
            (add1 (+ n j))
            (+ n (add1 j)))
        (= Nat
            (add1 (add1 (+  n j)))
            (add1 (+ n (add1 j)))))))
(define step-add1+=+add1
  (λ (j n add1+=+add1-n)
    (cong add1+=+add1-n
      (+ 1))))

(define add1+=+add1
  (λ (n j)
    (ind-Nat n
      (mot-add1+=+add1 j)
      (same (add1 j))
      (step-add1+=+add1 j) )))

(claim double
  (-> Nat
      Nat))
(define double
  (λ (n)
    (iter-Nat n
      zero
      (λ (j)
        (add1 (add1 j))))))
(claim twice
  (-> Nat
      Nat))
(define twice
  (λ (n)
    (+ n n)))

(claim mot-twice=double
  (-> Nat
      U))
(define mot-twice=double
  (λ (n)
    (= Nat (twice n) (double n))))

(claim mot-step-twice=double
  (-> Nat Nat
      U))
(define mot-step-twice=double
  (λ (n-1 k)
    (= Nat 
      (add1 k) 
      (add1 (add1 (double n-1))))))
 
(claim step-twice=double
  (Pi ((n-1 Nat))
    (-> (mot-twice=double n-1)
        (mot-twice=double (add1 n-1)))))
(define step-twice=double
  (λ (n-1 twice=double-n-1)
    (replace (add1+=+add1 n-1 n-1) ; target : (= Nat (double n-1) (twice n-1))
      (mot-step-twice=double n-1)
       (cong twice=double-n-1
         (+ 2)) )))


(claim twice=double
  (Pi ((n Nat))
    (= Nat (twice n) (double n))))
(define twice=double
  (λ (n)
    (ind-Nat n
      mot-twice=double
      (same zero)
      step-twice=double)))


(claim base-double-Vec
  (Pi ((E U))
    (-> (Vec E zero)
        (Vec E (double zero)))))
(define base-double-Vec
  (λ (E es)
    vecnil))

(claim step-double-Vec
  (Pi ((E U)
       (l Nat))
    (-> (-> (Vec E l)
            (Vec E (double l)))
        (-> (Vec E (add1 l))
          (Vec E (double (add1 l)))))))
(define step-double-Vec
  (λ (E l double-vec)
    (λ (es)
     (vec:: (head es)
       (vec:: (head es)
         (double-vec (tail es)))))))

(claim mot-double-Vec
  (-> U Nat
      U))
(define mot-double-Vec
  (λ (E n)
    (-> (Vec E n)
        (Vec E (double n)))))
    
(claim double-Vec
  (Pi ((E U)
       (l Nat))
    (-> (Vec E l)
        (Vec E (double l)))))
(define double-Vec
  (λ (E l)
    (ind-Nat l
      (mot-double-Vec E)
      (base-double-Vec E)
      (step-double-Vec E))))


